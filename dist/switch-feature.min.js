"use strict";function sf(switchFeaturesConfig,$compile){return{replace:!1,restrict:"A",scope:!0,link:function(scope,element,attrs){var vm=this;return switchFeaturesConfig.config.features[attrs.sf]===!0&&(attrs.$set("ng-if",!1),$compile(element)(scope)),vm}}}angular.module("switchFeatures",[]).config(function($httpProvider){$httpProvider.interceptors.push("mockInterceptor")}),angular.module("switchFeatures").provider("switchFeaturesConfig",function(){var self=this;return self.config={basePathMock:"/mocks/",features:{},mocks:{}},self.$get=function(){var provider={};return provider.config=self.config,provider.setBasePathMock=self.setBasePathMock,provider.setConfig=self.setConfig,provider.setMocks=self.setMocks,provider.setFeatures=self.setFeatures,provider},self.setBasePathMock=function(basePathMock){self.config.basePathMock=basePathMock},self.setConfig=function(config){angular.extend(self.config.config,config)},self.setMocks=function(mocks){angular.extend(self.config.mocks,mocks)},self.setFeatures=function(features){angular.extend(self.config.features,features)},self}),angular.module("switchFeatures").factory("mockInterceptor",function(switchFeaturesConfig){function rewriteConfig(config){var match=Object.keys(switchFeaturesConfig.config.mocks).filter(function(element){return config.url.indexOf(element)>0?!0:!1})[0];return match&&switchFeaturesConfig.config.mocks[match+" WITH "+config.method]?(config.url=switchFeaturesConfig.config.basePathMock+switchFeaturesConfig.config.mocks[match+" WITH "+config.method],config.method="GET"):match&&switchFeaturesConfig.config.mocks[match]&&(config.url=switchFeaturesConfig.config.basePathMock+switchFeaturesConfig.config.mocks[match],config.method="GET"),config}return{request:function(config){return rewriteConfig(config)}}}),angular.module("switchFeatures").directive("sf",sf);